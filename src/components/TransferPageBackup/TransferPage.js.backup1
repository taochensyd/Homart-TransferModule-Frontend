import React, { useState } from "react";
import axios from "axios";
import "./TransferPage.css"; // make sure to import the CSS file

const TransferPage = ({ username }) => {
  const [batchNumber, setBatchNumber] = useState("");
  const [itemCode, setItemCode] = useState("");
  const [status, setStatus] = useState("");
  const [warehouses, setWarehouses] = useState([]);
  const [selectedWarehouse, setSelectedWarehouse] = useState("");
  const [selectedFromBin, setSelectedFromBin] = useState("");
  const [selectedToWarehouse, setSelectedToWarehouse] = useState("");
  const [selectedToBin, setSelectedToBin] = useState("");
  const [quantity, setQuantity] = useState("");
  const [maxQuantity, setMaxQuantity] = useState("");
  const [uomName, setUomName] = useState("");
  const [batchInBin, setBatchInBin] = useState([]);
  const [bins, setBins] = useState([]);

  // Call this function whenever the selectedWarehouse changes
  React.useEffect(() => {
    calculateMaxQuantity();
    if (selectedWarehouse) {
      fetchBatchInBin(batchNumber);
    } else {
      setBins([]);
    }
  }, [selectedWarehouse]);

  const handleSearchClick = async () => {
    try {
      const response = await axios.post(
        "http://localhost:3005/api/batchnumberdetail",
        {
          BatchNumber: batchNumber,
        }
      );
      if (
        response.data &&
        response.data.value &&
        response.data.value.length > 0
      ) {
        setItemCode(response.data.value[0].ItemCode);
        if (response.data.value[0].Status.includes("_")) {
          setStatus(response.data.value[0].Status.split("_")[1].toUpperCase());
        } else {
          setStatus(response.data.value[0].Status);
        }
      }
    } catch (error) {
      console.error(error);
    }
    handleItemSearch();
  };

  const handleItemSearch = async () => {
    try {
      const response = await axios.post("http://localhost:3005/api/items", {
        ItemNumber: itemCode,
      });
      setUomName(response.data.InventoryUOM);
      if (response.data.ItemWarehouseInfoCollection) {
        const filteredWarehouses =
          response.data.ItemWarehouseInfoCollection.filter(
            (item) => item.InStock > 0
          );
        setWarehouses(
          filteredWarehouses.map((item) => ({
            WarehouseCode: item.WarehouseCode,
            InStock: item.InStock,
          }))
        );
      }
    } catch (error) {
      console.error(error);
    }
  };

  const calculateMaxQuantity = () => {
    let maxQty = 0;
    if (selectedWarehouse) {
      const warehouse = warehouses.find(
        (warehouse) => warehouse.WarehouseCode === selectedWarehouse
      );
      if (warehouse) {
        maxQty = warehouse.InStock;
      }
    } else {
      maxQty = warehouses.reduce(
        (acc, warehouse) => acc + warehouse.InStock,
        0
      );
    }
    setMaxQuantity(maxQty);
  };

  const fetchBatchInBin = async (batchNumber) => {
    try {
      const response = await axios.post(
        "http://localhost:3005/api/batchinbin",
        {
          BatchNumber: batchNumber,
        }
      );
      if (response.data && response.data.value) {
        setBatchInBin(response.data.value);
        setBins(response.data.value.map((item) => item.BinCode));
      }
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div>
      <h2>Transfer Page</h2>
      <div className="flexbox">
        <div className="row">
          <div className="cell">Login Person</div>
          <div className="cell">{username.toUpperCase()}</div>
          <div className="cell db">DB:Homart_Live</div>
        </div>
        <div className="row">
          <div className="cell">Batch Number</div>
          <div className="cell">
            <input
              type="text"
              value={batchNumber}
              onChange={(event) => setBatchNumber(event.target.value)}
            />
          </div>
          <div className="cell">
            <button onClick={handleSearchClick}>Search</button>
          </div>
        </div>
        <div className="row">
          <div className="cell">Item Code</div>
          <div className="cell">{itemCode}</div>
          <div className="cell">{status}</div>
        </div>
        <div className="row">
          <div className="cell">From Warehouse</div>
          <div className="cell">
            <select
              value={selectedWarehouse}
              onChange={(event) => setSelectedWarehouse(event.target.value)}
            >
              <option value="">Source Warehouse</option>
              {warehouses.map((warehouse) => (
                <option
                  key={warehouse.WarehouseCode}
                  value={warehouse.WarehouseCode}
                >
                  {/* Will need to change below to full warehouse house name. */}
                  {warehouse.WarehouseCode}
                </option>
              ))}
            </select>
          </div>
          <div className="cell">{selectedWarehouse}</div>
        </div>
        <div className="row">
          <div className="cell">From Bin</div>
          <div className="cell">
            <select
              value={selectedFromBin}
              onChange={(event) => setSelectedFromBin(event.target.value)}
            >
              <option value="">Source Bin</option>
              {bins.map((bin) => (
                <option key={bin} value={bin}>
                  {bin}
                </option>
              ))}
            </select>
          </div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">To Warehouse</div>
          <div className="cell">
            <select
              value={selectedToWarehouse}
              onChange={(event) => setSelectedToWarehouse(event.target.value)}
            >
              <option value="">Destination Warehouse</option>
              {/* Add options for the To Warehouse dropdown list here */}
            </select>
          </div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">To Bin</div>
          <div className="cell">
            <select
              value={selectedToBin}
              onChange={(event) => setSelectedToBin(event.target.value)}
            >
              <option value="">Destination Bin</option>
              {/* Add options for the To Bin dropdown list here */}
            </select>
          </div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">Quantity</div>
          <div className="cell">
            <input
              type="number"
              step="1"
              value={quantity}
              onChange={(event) => setQuantity(event.target.value)}
            />
          </div>
          <div className="cell">Maximum Qty = {maxQuantity}</div>
        </div>
        <div className="row">
          <div className="cell">UoM Name</div>
          <div className="cell">{uomName}</div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">Posting Date</div>
          <div className="cell">
            <input
              type="text"
              value={new Date().toLocaleDateString("en-AU")}
              onChange={(event) => {}}
            />
          </div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">Remarks</div>
          <div className="cell">
            <textarea></textarea>
          </div>
          <div className="cell"></div>
        </div>
        <div className="row">
          <div className="cell">
            <button onClick={() => {}}>Clear All</button>
          </div>
          <div className="cell"></div>
          <div className="cell">
            <button onClick={() => {}}>Transfer</button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TransferPage;
